/**
 * HumanTaskClientAPIAdminStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.7.8  Built on : May 19, 2018 (07:06:11 BST)
 */
package org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803;


/*
 *  HumanTaskClientAPIAdminStub java implementation
 */
public class HumanTaskClientAPIAdminStub extends org.apache.axis2.client.Stub
    implements HumanTaskClientAPIAdmin {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    //https://localhost:9444/services/HumanTaskClientAPIAdmin/
    private final org.apache.xmlbeans.XmlOptions _xmlOptions;

    {
        _xmlOptions = new org.apache.xmlbeans.XmlOptions();
        _xmlOptions.setSaveNoXmlDecl();
        _xmlOptions.setSaveAggressiveNamespaces();
        _xmlOptions.setSaveNamespacesFirst();
    }

    /**
     *Constructor that takes in a configContext
     */
    public HumanTaskClientAPIAdminStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public HumanTaskClientAPIAdminStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /**
     * Default Constructor
     */
    public HumanTaskClientAPIAdminStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext,
            "https://localhost:9444/services/HumanTaskClientAPIAdmin/");
    }

    /**
     * Default Constructor
     */
    public HumanTaskClientAPIAdminStub() throws org.apache.axis2.AxisFault {
        this("https://localhost:9444/services/HumanTaskClientAPIAdmin/");
    }

    /**
     * Constructor taking the target endpoint
     */
    public HumanTaskClientAPIAdminStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService(
                "HumanTaskClientAPIAdmin" + getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[76];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "deleteComment"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getOutcome"));
        _service.addOperation(__operation);

        _operations[1] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getRendering"));
        _service.addOperation(__operation);

        _operations[2] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getSubtasks"));
        _service.addOperation(__operation);

        _operations[3] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "remove"));
        _service.addOperation(__operation);

        _operations[4] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getMyTaskAbstracts"));
        _service.addOperation(__operation);

        _operations[5] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getRenderingTypes"));
        _service.addOperation(__operation);

        _operations[6] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "skip"));
        _service.addOperation(__operation);

        _operations[7] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchClaim"));
        _service.addOperation(__operation);

        _operations[8] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchSuspendUntil"));
        _service.addOperation(__operation);

        _operations[9] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "loadAuthorisationParams"));
        _service.addOperation(__operation);

        _operations[10] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "delegate"));
        _service.addOperation(__operation);

        _operations[11] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getOutput"));
        _service.addOperation(__operation);

        _operations[12] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setOutput"));
        _service.addOperation(__operation);

        _operations[13] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchFail"));
        _service.addOperation(__operation);

        _operations[14] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchSetPriority"));
        _service.addOperation(__operation);

        _operations[15] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "loadTaskEvents"));
        _service.addOperation(__operation);

        _operations[16] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getAttachmentInfos"));
        _service.addOperation(__operation);

        _operations[17] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "forward"));
        _service.addOperation(__operation);

        _operations[18] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "deleteOutput"));
        _service.addOperation(__operation);

        _operations[19] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setGenericHumanRole"));
        _service.addOperation(__operation);

        _operations[20] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "resume"));
        _service.addOperation(__operation);

        _operations[21] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setTaskStartDeadlineExpression"));
        _service.addOperation(__operation);

        _operations[22] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getParentTask"));
        _service.addOperation(__operation);

        _operations[23] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchNominate"));
        _service.addOperation(__operation);

        _operations[24] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "start"));
        _service.addOperation(__operation);

        _operations[25] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchRelease"));
        _service.addOperation(__operation);

        _operations[26] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getTaskOperations"));
        _service.addOperation(__operation);

        _operations[27] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchStop"));
        _service.addOperation(__operation);

        _operations[28] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchSkip"));
        _service.addOperation(__operation);

        _operations[29] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchSetGenericHumanRole"));
        _service.addOperation(__operation);

        _operations[30] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchRemove"));
        _service.addOperation(__operation);

        _operations[31] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getTaskDetails"));
        _service.addOperation(__operation);

        _operations[32] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchComplete"));
        _service.addOperation(__operation);

        _operations[33] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "deleteAttachment"));
        _service.addOperation(__operation);

        _operations[34] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "complete"));
        _service.addOperation(__operation);

        _operations[35] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "instantiateSubtask"));
        _service.addOperation(__operation);

        _operations[36] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "release"));
        _service.addOperation(__operation);

        _operations[37] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getTaskHistory"));
        _service.addOperation(__operation);

        _operations[38] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getFault"));
        _service.addOperation(__operation);

        _operations[39] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setTaskCompletionDurationExpression"));
        _service.addOperation(__operation);

        _operations[40] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "deleteFault"));
        _service.addOperation(__operation);

        _operations[41] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "addAttachment"));
        _service.addOperation(__operation);

        _operations[42] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getInput"));
        _service.addOperation(__operation);

        _operations[43] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "loadTask"));
        _service.addOperation(__operation);

        _operations[44] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "suspendUntil"));
        _service.addOperation(__operation);

        _operations[45] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "hasSubtasks"));
        _service.addOperation(__operation);

        _operations[46] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getMyTaskDetails"));
        _service.addOperation(__operation);

        _operations[47] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setFault"));
        _service.addOperation(__operation);

        _operations[48] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchForward"));
        _service.addOperation(__operation);

        _operations[49] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setTaskStartDurationExpression"));
        _service.addOperation(__operation);

        _operations[50] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchStart"));
        _service.addOperation(__operation);

        _operations[51] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchSuspend"));
        _service.addOperation(__operation);

        _operations[52] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getTaskDescription"));
        _service.addOperation(__operation);

        _operations[53] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "nominate"));
        _service.addOperation(__operation);

        _operations[54] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "simpleQuery"));
        _service.addOperation(__operation);

        _operations[55] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "addComment"));
        _service.addOperation(__operation);

        _operations[56] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "isSubtask"));
        _service.addOperation(__operation);

        _operations[57] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "claim"));
        _service.addOperation(__operation);

        _operations[58] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getComments"));
        _service.addOperation(__operation);

        _operations[59] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "query"));
        _service.addOperation(__operation);

        _operations[60] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getAssignableUserList"));
        _service.addOperation(__operation);

        _operations[61] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchDelegate"));
        _service.addOperation(__operation);

        _operations[62] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getAttachment"));
        _service.addOperation(__operation);

        _operations[63] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "suspend"));
        _service.addOperation(__operation);

        _operations[64] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "updateComment"));
        _service.addOperation(__operation);

        _operations[65] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getParentTaskIdentifier"));
        _service.addOperation(__operation);

        _operations[66] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchResume"));
        _service.addOperation(__operation);

        _operations[67] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "stop"));
        _service.addOperation(__operation);

        _operations[68] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setTaskCompletionDeadlineExpression"));
        _service.addOperation(__operation);

        _operations[69] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "fail"));
        _service.addOperation(__operation);

        _operations[70] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getTaskInstanceData"));
        _service.addOperation(__operation);

        _operations[71] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "batchActivate"));
        _service.addOperation(__operation);

        _operations[72] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "setPriority"));
        _service.addOperation(__operation);

        _operations[73] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "getSubtaskIdentifiers"));
        _service.addOperation(__operation);

        _operations[74] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                "activate"));
        _service.addOperation(__operation);

        _operations[75] = __operation;
    }

    //populates the faults
    private void populateFaults() {
        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getOutcome"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getOutcome"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getOutcome"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getOutcome"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getOutcome"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getOutcome"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getRendering"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getRendering"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getRendering"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "remove"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getMyTaskAbstracts"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getRenderingTypes"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getRenderingTypes"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getRenderingTypes"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "skip"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "loadAuthorisationParams"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "loadAuthorisationParams"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "loadAuthorisationParams"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "loadAuthorisationParams"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "loadAuthorisationParams"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "loadAuthorisationParams"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "recipientNotAllowed"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "recipientNotAllowed"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "recipientNotAllowed"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "delegate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "loadTaskEvents"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "loadTaskEvents"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "loadTaskEvents"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "loadTaskEvents"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "loadTaskEvents"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "loadTaskEvents"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getAttachmentInfos"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "forward"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteOutput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setGenericHumanRole"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "resume"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskStartDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getParentTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "start"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskOperations"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskOperations"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskOperations"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskOperations"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskOperations"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskOperations"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "complete"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "instantiateSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "release"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getTaskHistory"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskCompletionDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "deleteFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "addAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getInput"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "loadTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "loadTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "loadTask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "suspendUntil"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "hasSubtasks"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getMyTaskDetails"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setFault"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskStartDurationExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskDescription"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskDescription"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskDescription"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "nominate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "simpleQuery"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "simpleQuery"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "simpleQuery"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "simpleQuery"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "simpleQuery"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "simpleQuery"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "addComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "isSubtask"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "claim"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getComments"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "query"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "query"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "query"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "query"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "query"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "query"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAssignableUserList"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAssignableUserList"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAssignableUserList"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAssignableUserList"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAssignableUserList"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAssignableUserList"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getAttachment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "suspend"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "updateComment"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getParentTaskIdentifier"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "stop"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setTaskCompletionDeadlineExpression"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "fail"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getTaskInstanceData"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "setPriority"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "getSubtaskIdentifiers"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalArgument"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalOperation"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalState"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "illegalAccess"), "activate"),
            "org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument");
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#deleteComment
     * @param deleteComment152
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument deleteComment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentDocument deleteComment152)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteComment");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    deleteComment152,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "deleteComment")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteComment"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "deleteComment"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteComment"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteComment"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startdeleteComment
     * @param deleteComment152
     */
    public void startdeleteComment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentDocument deleteComment152,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteComment");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                deleteComment152,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteComment")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "deleteComment"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument.class);
                        callback.receiveResultdeleteComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrordeleteComment(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "deleteComment"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteComment"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteComment"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrordeleteComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrordeleteComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrordeleteComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrordeleteComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrordeleteComment(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteComment(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteComment(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteComment(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteComment(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteComment(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteComment(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteComment(f);
                                }
                            } else {
                                callback.receiveErrordeleteComment(f);
                            }
                        } else {
                            callback.receiveErrordeleteComment(f);
                        }
                    } else {
                        callback.receiveErrordeleteComment(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrordeleteComment(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[0].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getOutcome
     * @param getOutcome154
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument getOutcome(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeDocument getOutcome154)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getOutcome");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getOutcome154,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getOutcome")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getOutcome"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getOutcome"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getOutcome"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getOutcome"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetOutcome
     * @param getOutcome154
     */
    public void startgetOutcome(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeDocument getOutcome154,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getOutcome");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getOutcome154,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getOutcome")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getOutcome"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument.class);
                        callback.receiveResultgetOutcome((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetOutcome(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getOutcome"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getOutcome"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getOutcome"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetOutcome((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetOutcome((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetOutcome(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutcome(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutcome(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutcome(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutcome(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutcome(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutcome(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutcome(f);
                                }
                            } else {
                                callback.receiveErrorgetOutcome(f);
                            }
                        } else {
                            callback.receiveErrorgetOutcome(f);
                        }
                    } else {
                        callback.receiveErrorgetOutcome(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetOutcome(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[1].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getRendering
     * @param getRendering156
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument getRendering(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingDocument getRendering156)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getRendering");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getRendering156,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getRendering")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getRendering"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getRendering"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getRendering"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getRendering"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetRendering
     * @param getRendering156
     */
    public void startgetRendering(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingDocument getRendering156,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getRendering");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getRendering156,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getRendering")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getRendering"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument.class);
                        callback.receiveResultgetRendering((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetRendering(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getRendering"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getRendering"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getRendering"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetRendering((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetRendering(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRendering(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRendering(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRendering(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRendering(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRendering(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRendering(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRendering(f);
                                }
                            } else {
                                callback.receiveErrorgetRendering(f);
                            }
                        } else {
                            callback.receiveErrorgetRendering(f);
                        }
                    } else {
                        callback.receiveErrorgetRendering(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetRendering(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[2].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[2].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getSubtasks
     * @param getSubtasks158
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument getSubtasks(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksDocument getSubtasks158)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getSubtasks");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getSubtasks158,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getSubtasks")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getSubtasks"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getSubtasks"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getSubtasks"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getSubtasks"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetSubtasks
     * @param getSubtasks158
     */
    public void startgetSubtasks(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksDocument getSubtasks158,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getSubtasks");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getSubtasks158,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getSubtasks")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getSubtasks"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument.class);
                        callback.receiveResultgetSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetSubtasks(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getSubtasks"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getSubtasks"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getSubtasks"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetSubtasks(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtasks(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtasks(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtasks(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtasks(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtasks(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtasks(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtasks(f);
                                }
                            } else {
                                callback.receiveErrorgetSubtasks(f);
                            }
                        } else {
                            callback.receiveErrorgetSubtasks(f);
                        }
                    } else {
                        callback.receiveErrorgetSubtasks(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetSubtasks(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[3].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[3].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#remove
     * @param remove160
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument remove(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveDocument remove160)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/remove");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    remove160,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "remove")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "remove"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "remove"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "remove"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "remove"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startremove
     * @param remove160
     */
    public void startremove(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveDocument remove160,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/remove");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                remove160,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "remove")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "remove"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument.class);
                        callback.receiveResultremove((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorremove(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "remove"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "remove"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "remove"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorremove((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorremove((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorremove((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorremove(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorremove(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorremove(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorremove(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorremove(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorremove(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorremove(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorremove(f);
                                }
                            } else {
                                callback.receiveErrorremove(f);
                            }
                        } else {
                            callback.receiveErrorremove(f);
                        }
                    } else {
                        callback.receiveErrorremove(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorremove(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[4].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[4].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getMyTaskAbstracts
     * @param getMyTaskAbstracts162
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument getMyTaskAbstracts(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsDocument getMyTaskAbstracts162)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getMyTaskAbstracts");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getMyTaskAbstracts162,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getMyTaskAbstracts")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getMyTaskAbstracts"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getMyTaskAbstracts"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getMyTaskAbstracts"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getMyTaskAbstracts"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetMyTaskAbstracts
     * @param getMyTaskAbstracts162
     */
    public void startgetMyTaskAbstracts(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsDocument getMyTaskAbstracts162,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getMyTaskAbstracts");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getMyTaskAbstracts162,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getMyTaskAbstracts")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getMyTaskAbstracts"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument.class);
                        callback.receiveResultgetMyTaskAbstracts((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetMyTaskAbstracts(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getMyTaskAbstracts"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getMyTaskAbstracts"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getMyTaskAbstracts"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetMyTaskAbstracts((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetMyTaskAbstracts((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetMyTaskAbstracts((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetMyTaskAbstracts(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskAbstracts(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskAbstracts(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskAbstracts(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskAbstracts(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskAbstracts(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskAbstracts(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskAbstracts(f);
                                }
                            } else {
                                callback.receiveErrorgetMyTaskAbstracts(f);
                            }
                        } else {
                            callback.receiveErrorgetMyTaskAbstracts(f);
                        }
                    } else {
                        callback.receiveErrorgetMyTaskAbstracts(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetMyTaskAbstracts(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[5].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[5].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getRenderingTypes
     * @param getRenderingTypes164
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument getRenderingTypes(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesDocument getRenderingTypes164)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getRenderingTypes");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getRenderingTypes164,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getRenderingTypes")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getRenderingTypes"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getRenderingTypes"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getRenderingTypes"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getRenderingTypes"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetRenderingTypes
     * @param getRenderingTypes164
     */
    public void startgetRenderingTypes(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesDocument getRenderingTypes164,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getRenderingTypes");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getRenderingTypes164,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getRenderingTypes")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getRenderingTypes"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument.class);
                        callback.receiveResultgetRenderingTypes((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetRenderingTypes(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getRenderingTypes"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getRenderingTypes"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getRenderingTypes"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetRenderingTypes((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetRenderingTypes(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRenderingTypes(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRenderingTypes(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRenderingTypes(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRenderingTypes(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRenderingTypes(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRenderingTypes(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetRenderingTypes(f);
                                }
                            } else {
                                callback.receiveErrorgetRenderingTypes(f);
                            }
                        } else {
                            callback.receiveErrorgetRenderingTypes(f);
                        }
                    } else {
                        callback.receiveErrorgetRenderingTypes(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetRenderingTypes(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[6].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[6].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#skip
     * @param skip166
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument skip(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipDocument skip166)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/skip");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    skip166,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "skip")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "skip"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "skip"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "skip"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "skip"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startskip
     * @param skip166
     */
    public void startskip(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipDocument skip166,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/skip");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                skip166,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "skip")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "skip"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument.class);
                        callback.receiveResultskip((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorskip(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "skip"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "skip"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "skip"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorskip((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorskip((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorskip((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorskip((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorskip(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorskip(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorskip(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorskip(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorskip(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorskip(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorskip(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorskip(f);
                                }
                            } else {
                                callback.receiveErrorskip(f);
                            }
                        } else {
                            callback.receiveErrorskip(f);
                        }
                    } else {
                        callback.receiveErrorskip(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorskip(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[7].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[7].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchClaim
     * @param batchClaim168
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument batchClaim(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimDocument batchClaim168)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchClaim");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchClaim168,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchClaim")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchClaim"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchClaim"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchClaim"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchClaim"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchClaim
     * @param batchClaim168
     */
    public void startbatchClaim(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimDocument batchClaim168,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchClaim");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchClaim168,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchClaim")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchClaim"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument.class);
                        callback.receiveResultbatchClaim((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchClaim(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchClaim"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchClaim"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchClaim"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchClaim(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchClaim(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchClaim(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchClaim(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchClaim(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchClaim(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchClaim(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchClaim(f);
                                }
                            } else {
                                callback.receiveErrorbatchClaim(f);
                            }
                        } else {
                            callback.receiveErrorbatchClaim(f);
                        }
                    } else {
                        callback.receiveErrorbatchClaim(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchClaim(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[8].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[8].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchSuspendUntil
     * @param batchSuspendUntil170
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument batchSuspendUntil(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilDocument batchSuspendUntil170)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSuspendUntil");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchSuspendUntil170,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchSuspendUntil")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSuspendUntil"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchSuspendUntil"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSuspendUntil"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSuspendUntil"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchSuspendUntil
     * @param batchSuspendUntil170
     */
    public void startbatchSuspendUntil(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilDocument batchSuspendUntil170,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSuspendUntil");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchSuspendUntil170,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSuspendUntil")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchSuspendUntil"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument.class);
                        callback.receiveResultbatchSuspendUntil((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchSuspendUntil(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "batchSuspendUntil"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSuspendUntil"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSuspendUntil"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchSuspendUntil(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspendUntil(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspendUntil(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspendUntil(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspendUntil(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspendUntil(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspendUntil(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspendUntil(f);
                                }
                            } else {
                                callback.receiveErrorbatchSuspendUntil(f);
                            }
                        } else {
                            callback.receiveErrorbatchSuspendUntil(f);
                        }
                    } else {
                        callback.receiveErrorbatchSuspendUntil(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchSuspendUntil(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[9].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[9].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#loadAuthorisationParams
     * @param loadAuthorisationParams172
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument loadAuthorisationParams(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsDocument loadAuthorisationParams172)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/loadAuthorisationParams");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    loadAuthorisationParams172,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "loadAuthorisationParams")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "loadAuthorisationParams"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "loadAuthorisationParams"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "loadAuthorisationParams"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "loadAuthorisationParams"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startloadAuthorisationParams
     * @param loadAuthorisationParams172
     */
    public void startloadAuthorisationParams(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsDocument loadAuthorisationParams172,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/loadAuthorisationParams");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                loadAuthorisationParams172,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "loadAuthorisationParams")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "loadAuthorisationParams"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument.class);
                        callback.receiveResultloadAuthorisationParams((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorloadAuthorisationParams(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "loadAuthorisationParams"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "loadAuthorisationParams"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "loadAuthorisationParams"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorloadAuthorisationParams((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorloadAuthorisationParams((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorloadAuthorisationParams(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadAuthorisationParams(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadAuthorisationParams(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadAuthorisationParams(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadAuthorisationParams(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadAuthorisationParams(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadAuthorisationParams(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadAuthorisationParams(f);
                                }
                            } else {
                                callback.receiveErrorloadAuthorisationParams(f);
                            }
                        } else {
                            callback.receiveErrorloadAuthorisationParams(f);
                        }
                    } else {
                        callback.receiveErrorloadAuthorisationParams(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorloadAuthorisationParams(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[10].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[10].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#delegate
     * @param delegate174
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument delegate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateDocument delegate174)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/delegate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    delegate174,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "delegate")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "delegate"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "delegate"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "delegate"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "delegate"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startdelegate
     * @param delegate174
     */
    public void startdelegate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateDocument delegate174,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/delegate");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                delegate174,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "delegate")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "delegate"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument.class);
                        callback.receiveResultdelegate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrordelegate(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "delegate"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "delegate"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "delegate"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrordelegate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrordelegate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrordelegate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException) {
                                        callback.receiveErrordelegate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedException) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrordelegate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrordelegate(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordelegate(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordelegate(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordelegate(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordelegate(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordelegate(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordelegate(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordelegate(f);
                                }
                            } else {
                                callback.receiveErrordelegate(f);
                            }
                        } else {
                            callback.receiveErrordelegate(f);
                        }
                    } else {
                        callback.receiveErrordelegate(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrordelegate(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[11].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[11].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getOutput
     * @param getOutput176
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument getOutput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputDocument getOutput176)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getOutput");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getOutput176,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getOutput")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getOutput"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getOutput"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getOutput"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getOutput"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetOutput
     * @param getOutput176
     */
    public void startgetOutput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputDocument getOutput176,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getOutput");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getOutput176,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getOutput")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getOutput"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument.class);
                        callback.receiveResultgetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetOutput(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getOutput"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "getOutput"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "getOutput"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetOutput(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutput(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutput(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutput(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutput(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutput(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutput(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetOutput(f);
                                }
                            } else {
                                callback.receiveErrorgetOutput(f);
                            }
                        } else {
                            callback.receiveErrorgetOutput(f);
                        }
                    } else {
                        callback.receiveErrorgetOutput(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetOutput(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[12].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[12].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setOutput
     * @param setOutput178
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument setOutput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputDocument setOutput178)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setOutput");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setOutput178,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setOutput")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setOutput"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "setOutput"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setOutput"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setOutput"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetOutput
     * @param setOutput178
     */
    public void startsetOutput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputDocument setOutput178,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setOutput");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setOutput178,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setOutput")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setOutput"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument.class);
                        callback.receiveResultsetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetOutput(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "setOutput"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "setOutput"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "setOutput"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetOutput(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetOutput(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetOutput(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetOutput(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetOutput(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetOutput(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetOutput(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetOutput(f);
                                }
                            } else {
                                callback.receiveErrorsetOutput(f);
                            }
                        } else {
                            callback.receiveErrorsetOutput(f);
                        }
                    } else {
                        callback.receiveErrorsetOutput(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetOutput(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[13].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[13].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchFail
     * @param batchFail180
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument batchFail(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailDocument batchFail180)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchFail");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchFail180,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchFail")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchFail"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchFail"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchFail"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchFail"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchFail
     * @param batchFail180
     */
    public void startbatchFail(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailDocument batchFail180,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchFail");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchFail180,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchFail")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchFail"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument.class);
                        callback.receiveResultbatchFail((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchFail(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchFail"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "batchFail"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "batchFail"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchFail(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchFail(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchFail(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchFail(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchFail(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchFail(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchFail(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchFail(f);
                                }
                            } else {
                                callback.receiveErrorbatchFail(f);
                            }
                        } else {
                            callback.receiveErrorbatchFail(f);
                        }
                    } else {
                        callback.receiveErrorbatchFail(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchFail(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[14].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[14].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchSetPriority
     * @param batchSetPriority182
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument batchSetPriority(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityDocument batchSetPriority182)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSetPriority");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchSetPriority182,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchSetPriority")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSetPriority"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchSetPriority"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSetPriority"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSetPriority"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchSetPriority
     * @param batchSetPriority182
     */
    public void startbatchSetPriority(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityDocument batchSetPriority182,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSetPriority");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchSetPriority182,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSetPriority")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchSetPriority"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument.class);
                        callback.receiveResultbatchSetPriority((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchSetPriority(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "batchSetPriority"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSetPriority"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSetPriority"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchSetPriority(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetPriority(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetPriority(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetPriority(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetPriority(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetPriority(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetPriority(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetPriority(f);
                                }
                            } else {
                                callback.receiveErrorbatchSetPriority(f);
                            }
                        } else {
                            callback.receiveErrorbatchSetPriority(f);
                        }
                    } else {
                        callback.receiveErrorbatchSetPriority(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchSetPriority(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[15].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[15].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#loadTaskEvents
     * @param loadTaskEvents184
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument loadTaskEvents(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsDocument loadTaskEvents184)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/loadTaskEvents");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    loadTaskEvents184,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "loadTaskEvents")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "loadTaskEvents"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "loadTaskEvents"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "loadTaskEvents"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "loadTaskEvents"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startloadTaskEvents
     * @param loadTaskEvents184
     */
    public void startloadTaskEvents(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsDocument loadTaskEvents184,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/loadTaskEvents");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                loadTaskEvents184,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "loadTaskEvents")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "loadTaskEvents"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument.class);
                        callback.receiveResultloadTaskEvents((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorloadTaskEvents(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "loadTaskEvents"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "loadTaskEvents"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "loadTaskEvents"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorloadTaskEvents((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorloadTaskEvents((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorloadTaskEvents(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTaskEvents(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTaskEvents(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTaskEvents(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTaskEvents(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTaskEvents(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTaskEvents(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTaskEvents(f);
                                }
                            } else {
                                callback.receiveErrorloadTaskEvents(f);
                            }
                        } else {
                            callback.receiveErrorloadTaskEvents(f);
                        }
                    } else {
                        callback.receiveErrorloadTaskEvents(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorloadTaskEvents(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[16].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[16].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getAttachmentInfos
     * @param getAttachmentInfos186
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument getAttachmentInfos(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosDocument getAttachmentInfos186)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getAttachmentInfos");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getAttachmentInfos186,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getAttachmentInfos")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getAttachmentInfos"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getAttachmentInfos"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getAttachmentInfos"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getAttachmentInfos"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetAttachmentInfos
     * @param getAttachmentInfos186
     */
    public void startgetAttachmentInfos(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosDocument getAttachmentInfos186,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getAttachmentInfos");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getAttachmentInfos186,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getAttachmentInfos")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getAttachmentInfos"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument.class);
                        callback.receiveResultgetAttachmentInfos((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetAttachmentInfos(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getAttachmentInfos"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getAttachmentInfos"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getAttachmentInfos"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetAttachmentInfos((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetAttachmentInfos((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetAttachmentInfos((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetAttachmentInfos((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetAttachmentInfos(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachmentInfos(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachmentInfos(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachmentInfos(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachmentInfos(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachmentInfos(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachmentInfos(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachmentInfos(f);
                                }
                            } else {
                                callback.receiveErrorgetAttachmentInfos(f);
                            }
                        } else {
                            callback.receiveErrorgetAttachmentInfos(f);
                        }
                    } else {
                        callback.receiveErrorgetAttachmentInfos(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetAttachmentInfos(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[17].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[17].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#forward
     * @param forward188
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument forward(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardDocument forward188)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/forward");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    forward188,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "forward")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "forward"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "forward"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "forward"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "forward"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startforward
     * @param forward188
     */
    public void startforward(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardDocument forward188,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/forward");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                forward188,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "forward")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "forward"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument.class);
                        callback.receiveResultforward((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorforward(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "forward"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "forward"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "forward"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorforward((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorforward((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorforward((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorforward((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorforward(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorforward(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorforward(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorforward(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorforward(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorforward(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorforward(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorforward(f);
                                }
                            } else {
                                callback.receiveErrorforward(f);
                            }
                        } else {
                            callback.receiveErrorforward(f);
                        }
                    } else {
                        callback.receiveErrorforward(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorforward(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[18].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[18].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#deleteOutput
     * @param deleteOutput190
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument deleteOutput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputDocument deleteOutput190)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteOutput");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    deleteOutput190,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "deleteOutput")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteOutput"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "deleteOutput"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteOutput"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteOutput"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startdeleteOutput
     * @param deleteOutput190
     */
    public void startdeleteOutput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputDocument deleteOutput190,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteOutput");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                deleteOutput190,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteOutput")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "deleteOutput"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument.class);
                        callback.receiveResultdeleteOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrordeleteOutput(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "deleteOutput"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteOutput"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteOutput"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrordeleteOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrordeleteOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrordeleteOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrordeleteOutput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrordeleteOutput(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteOutput(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteOutput(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteOutput(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteOutput(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteOutput(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteOutput(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteOutput(f);
                                }
                            } else {
                                callback.receiveErrordeleteOutput(f);
                            }
                        } else {
                            callback.receiveErrordeleteOutput(f);
                        }
                    } else {
                        callback.receiveErrordeleteOutput(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrordeleteOutput(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[19].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[19].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setGenericHumanRole
     * @param setGenericHumanRole192
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument setGenericHumanRole(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleDocument setGenericHumanRole192)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setGenericHumanRole");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setGenericHumanRole192,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setGenericHumanRole")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setGenericHumanRole"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "setGenericHumanRole"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setGenericHumanRole"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setGenericHumanRole"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetGenericHumanRole
     * @param setGenericHumanRole192
     */
    public void startsetGenericHumanRole(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleDocument setGenericHumanRole192,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setGenericHumanRole");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setGenericHumanRole192,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setGenericHumanRole")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setGenericHumanRole"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument.class);
                        callback.receiveResultsetGenericHumanRole((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetGenericHumanRole(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "setGenericHumanRole"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setGenericHumanRole"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setGenericHumanRole"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetGenericHumanRole((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetGenericHumanRole((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetGenericHumanRole((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetGenericHumanRole((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetGenericHumanRole(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetGenericHumanRole(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetGenericHumanRole(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetGenericHumanRole(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetGenericHumanRole(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetGenericHumanRole(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetGenericHumanRole(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetGenericHumanRole(f);
                                }
                            } else {
                                callback.receiveErrorsetGenericHumanRole(f);
                            }
                        } else {
                            callback.receiveErrorsetGenericHumanRole(f);
                        }
                    } else {
                        callback.receiveErrorsetGenericHumanRole(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetGenericHumanRole(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[20].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[20].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#resume
     * @param resume194
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument resume(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeDocument resume194)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[21].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/resume");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    resume194,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "resume")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "resume"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "resume"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "resume"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "resume"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startresume
     * @param resume194
     */
    public void startresume(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeDocument resume194,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[21].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/resume");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                resume194,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "resume")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "resume"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument.class);
                        callback.receiveResultresume((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorresume(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "resume"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "resume"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "resume"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorresume((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorresume((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorresume((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorresume((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorresume(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresume(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresume(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresume(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresume(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresume(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresume(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresume(f);
                                }
                            } else {
                                callback.receiveErrorresume(f);
                            }
                        } else {
                            callback.receiveErrorresume(f);
                        }
                    } else {
                        callback.receiveErrorresume(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorresume(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[21].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[21].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setTaskStartDeadlineExpression
     * @param setTaskStartDeadlineExpression196
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument setTaskStartDeadlineExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionDocument setTaskStartDeadlineExpression196)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[22].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskStartDeadlineExpression");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setTaskStartDeadlineExpression196,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setTaskStartDeadlineExpression")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskStartDeadlineExpression"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "setTaskStartDeadlineExpression"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskStartDeadlineExpression"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskStartDeadlineExpression"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetTaskStartDeadlineExpression
     * @param setTaskStartDeadlineExpression196
     */
    public void startsetTaskStartDeadlineExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionDocument setTaskStartDeadlineExpression196,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[22].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskStartDeadlineExpression");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setTaskStartDeadlineExpression196,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskStartDeadlineExpression")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setTaskStartDeadlineExpression"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument.class);
                        callback.receiveResultsetTaskStartDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetTaskStartDeadlineExpression(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "setTaskStartDeadlineExpression"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskStartDeadlineExpression"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskStartDeadlineExpression"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetTaskStartDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetTaskStartDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetTaskStartDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetTaskStartDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetTaskStartDeadlineExpression(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDeadlineExpression(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDeadlineExpression(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDeadlineExpression(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDeadlineExpression(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDeadlineExpression(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDeadlineExpression(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDeadlineExpression(f);
                                }
                            } else {
                                callback.receiveErrorsetTaskStartDeadlineExpression(f);
                            }
                        } else {
                            callback.receiveErrorsetTaskStartDeadlineExpression(f);
                        }
                    } else {
                        callback.receiveErrorsetTaskStartDeadlineExpression(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetTaskStartDeadlineExpression(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[22].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[22].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getParentTask
     * @param getParentTask198
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument getParentTask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskDocument getParentTask198)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[23].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getParentTask");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getParentTask198,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getParentTask")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getParentTask"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getParentTask"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getParentTask"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getParentTask"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetParentTask
     * @param getParentTask198
     */
    public void startgetParentTask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskDocument getParentTask198,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[23].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getParentTask");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getParentTask198,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getParentTask")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getParentTask"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument.class);
                        callback.receiveResultgetParentTask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetParentTask(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getParentTask"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getParentTask"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getParentTask"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetParentTask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetParentTask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetParentTask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetParentTask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetParentTask(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTask(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTask(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTask(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTask(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTask(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTask(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTask(f);
                                }
                            } else {
                                callback.receiveErrorgetParentTask(f);
                            }
                        } else {
                            callback.receiveErrorgetParentTask(f);
                        }
                    } else {
                        callback.receiveErrorgetParentTask(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetParentTask(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[23].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[23].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchNominate
     * @param batchNominate200
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument batchNominate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateDocument batchNominate200)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[24].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchNominate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchNominate200,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchNominate")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchNominate"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchNominate"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchNominate"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchNominate"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchNominate
     * @param batchNominate200
     */
    public void startbatchNominate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateDocument batchNominate200,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[24].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchNominate");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchNominate200,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchNominate")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchNominate"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument.class);
                        callback.receiveResultbatchNominate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchNominate(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchNominate"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchNominate"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchNominate"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchNominate(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchNominate(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchNominate(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchNominate(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchNominate(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchNominate(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchNominate(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchNominate(f);
                                }
                            } else {
                                callback.receiveErrorbatchNominate(f);
                            }
                        } else {
                            callback.receiveErrorbatchNominate(f);
                        }
                    } else {
                        callback.receiveErrorbatchNominate(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchNominate(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[24].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[24].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#start
     * @param start202
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument start(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartDocument start202)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[25].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/start");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    start202,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "start")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "start"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "start"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "start"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "start"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startstart
     * @param start202
     */
    public void startstart(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartDocument start202,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[25].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/start");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                start202,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "start")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "start"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument.class);
                        callback.receiveResultstart((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorstart(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "start"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "start"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "start"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorstart((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorstart((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorstart((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorstart((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorstart(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstart(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstart(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstart(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstart(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstart(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstart(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstart(f);
                                }
                            } else {
                                callback.receiveErrorstart(f);
                            }
                        } else {
                            callback.receiveErrorstart(f);
                        }
                    } else {
                        callback.receiveErrorstart(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorstart(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[25].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[25].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchRelease
     * @param batchRelease204
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument batchRelease(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseDocument batchRelease204)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[26].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchRelease");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchRelease204,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchRelease")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchRelease"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchRelease"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchRelease"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchRelease"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchRelease
     * @param batchRelease204
     */
    public void startbatchRelease(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseDocument batchRelease204,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[26].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchRelease");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchRelease204,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchRelease")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchRelease"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument.class);
                        callback.receiveResultbatchRelease((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchRelease(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchRelease"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchRelease"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchRelease"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchRelease(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRelease(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRelease(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRelease(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRelease(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRelease(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRelease(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRelease(f);
                                }
                            } else {
                                callback.receiveErrorbatchRelease(f);
                            }
                        } else {
                            callback.receiveErrorbatchRelease(f);
                        }
                    } else {
                        callback.receiveErrorbatchRelease(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchRelease(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[26].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[26].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getTaskOperations
     * @param getTaskOperations206
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument getTaskOperations(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsDocument getTaskOperations206)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[27].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskOperations");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getTaskOperations206,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getTaskOperations")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskOperations"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getTaskOperations"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskOperations"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskOperations"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetTaskOperations
     * @param getTaskOperations206
     */
    public void startgetTaskOperations(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsDocument getTaskOperations206,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[27].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskOperations");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getTaskOperations206,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskOperations")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getTaskOperations"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument.class);
                        callback.receiveResultgetTaskOperations((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetTaskOperations(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getTaskOperations"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskOperations"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskOperations"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetTaskOperations((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetTaskOperations((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetTaskOperations(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskOperations(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskOperations(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskOperations(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskOperations(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskOperations(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskOperations(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskOperations(f);
                                }
                            } else {
                                callback.receiveErrorgetTaskOperations(f);
                            }
                        } else {
                            callback.receiveErrorgetTaskOperations(f);
                        }
                    } else {
                        callback.receiveErrorgetTaskOperations(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetTaskOperations(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[27].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[27].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchStop
     * @param batchStop208
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument batchStop(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopDocument batchStop208)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[28].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchStop");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchStop208,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchStop")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchStop"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchStop"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchStop"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchStop"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchStop
     * @param batchStop208
     */
    public void startbatchStop(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopDocument batchStop208,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[28].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchStop");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchStop208,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchStop")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchStop"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument.class);
                        callback.receiveResultbatchStop((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchStop(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchStop"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "batchStop"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "batchStop"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchStop(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStop(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStop(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStop(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStop(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStop(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStop(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStop(f);
                                }
                            } else {
                                callback.receiveErrorbatchStop(f);
                            }
                        } else {
                            callback.receiveErrorbatchStop(f);
                        }
                    } else {
                        callback.receiveErrorbatchStop(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchStop(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[28].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[28].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchSkip
     * @param batchSkip210
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument batchSkip(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipDocument batchSkip210)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[29].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSkip");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchSkip210,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchSkip")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSkip"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchSkip"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSkip"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSkip"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchSkip
     * @param batchSkip210
     */
    public void startbatchSkip(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipDocument batchSkip210,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[29].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSkip");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchSkip210,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSkip")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchSkip"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument.class);
                        callback.receiveResultbatchSkip((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchSkip(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchSkip"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "batchSkip"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "batchSkip"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchSkip(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSkip(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSkip(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSkip(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSkip(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSkip(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSkip(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSkip(f);
                                }
                            } else {
                                callback.receiveErrorbatchSkip(f);
                            }
                        } else {
                            callback.receiveErrorbatchSkip(f);
                        }
                    } else {
                        callback.receiveErrorbatchSkip(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchSkip(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[29].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[29].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchSetGenericHumanRole
     * @param batchSetGenericHumanRole212
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument batchSetGenericHumanRole(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleDocument batchSetGenericHumanRole212)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[30].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSetGenericHumanRole");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchSetGenericHumanRole212,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchSetGenericHumanRole")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSetGenericHumanRole"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchSetGenericHumanRole"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "batchSetGenericHumanRole"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "batchSetGenericHumanRole"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchSetGenericHumanRole
     * @param batchSetGenericHumanRole212
     */
    public void startbatchSetGenericHumanRole(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleDocument batchSetGenericHumanRole212,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[30].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSetGenericHumanRole");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchSetGenericHumanRole212,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSetGenericHumanRole")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchSetGenericHumanRole"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument.class);
                        callback.receiveResultbatchSetGenericHumanRole((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchSetGenericHumanRole(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "batchSetGenericHumanRole"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSetGenericHumanRole"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSetGenericHumanRole"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchSetGenericHumanRole(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetGenericHumanRole(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetGenericHumanRole(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetGenericHumanRole(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetGenericHumanRole(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetGenericHumanRole(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetGenericHumanRole(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSetGenericHumanRole(f);
                                }
                            } else {
                                callback.receiveErrorbatchSetGenericHumanRole(f);
                            }
                        } else {
                            callback.receiveErrorbatchSetGenericHumanRole(f);
                        }
                    } else {
                        callback.receiveErrorbatchSetGenericHumanRole(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchSetGenericHumanRole(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[30].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[30].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchRemove
     * @param batchRemove214
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument batchRemove(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveDocument batchRemove214)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[31].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchRemove");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchRemove214,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchRemove")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchRemove"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchRemove"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchRemove"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchRemove"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchRemove
     * @param batchRemove214
     */
    public void startbatchRemove(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveDocument batchRemove214,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[31].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchRemove");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchRemove214,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchRemove")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchRemove"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument.class);
                        callback.receiveResultbatchRemove((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchRemove(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchRemove"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchRemove"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchRemove"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchRemove(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRemove(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRemove(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRemove(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRemove(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRemove(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRemove(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchRemove(f);
                                }
                            } else {
                                callback.receiveErrorbatchRemove(f);
                            }
                        } else {
                            callback.receiveErrorbatchRemove(f);
                        }
                    } else {
                        callback.receiveErrorbatchRemove(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchRemove(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[31].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[31].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getTaskDetails
     * @param getTaskDetails216
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument getTaskDetails(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsDocument getTaskDetails216)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[32].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskDetails");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getTaskDetails216,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getTaskDetails")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskDetails"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getTaskDetails"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskDetails"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskDetails"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetTaskDetails
     * @param getTaskDetails216
     */
    public void startgetTaskDetails(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsDocument getTaskDetails216,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[32].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskDetails");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getTaskDetails216,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskDetails")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getTaskDetails"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument.class);
                        callback.receiveResultgetTaskDetails((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetTaskDetails(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getTaskDetails"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskDetails"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskDetails"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetTaskDetails((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetTaskDetails(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDetails(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDetails(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDetails(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDetails(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDetails(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDetails(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDetails(f);
                                }
                            } else {
                                callback.receiveErrorgetTaskDetails(f);
                            }
                        } else {
                            callback.receiveErrorgetTaskDetails(f);
                        }
                    } else {
                        callback.receiveErrorgetTaskDetails(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetTaskDetails(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[32].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[32].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchComplete
     * @param batchComplete218
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument batchComplete(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteDocument batchComplete218)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[33].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchComplete");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchComplete218,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchComplete")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchComplete"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchComplete"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchComplete"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchComplete"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchComplete
     * @param batchComplete218
     */
    public void startbatchComplete(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteDocument batchComplete218,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[33].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchComplete");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchComplete218,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchComplete")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchComplete"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument.class);
                        callback.receiveResultbatchComplete((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchComplete(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchComplete"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchComplete"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchComplete"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchComplete(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchComplete(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchComplete(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchComplete(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchComplete(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchComplete(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchComplete(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchComplete(f);
                                }
                            } else {
                                callback.receiveErrorbatchComplete(f);
                            }
                        } else {
                            callback.receiveErrorbatchComplete(f);
                        }
                    } else {
                        callback.receiveErrorbatchComplete(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchComplete(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[33].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[33].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#deleteAttachment
     * @param deleteAttachment220
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument deleteAttachment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentDocument deleteAttachment220)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[34].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteAttachment");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    deleteAttachment220,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "deleteAttachment")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteAttachment"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "deleteAttachment"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteAttachment"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteAttachment"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startdeleteAttachment
     * @param deleteAttachment220
     */
    public void startdeleteAttachment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentDocument deleteAttachment220,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[34].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteAttachment");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                deleteAttachment220,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteAttachment")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "deleteAttachment"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument.class);
                        callback.receiveResultdeleteAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrordeleteAttachment(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "deleteAttachment"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteAttachment"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteAttachment"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrordeleteAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrordeleteAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrordeleteAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrordeleteAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrordeleteAttachment(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteAttachment(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteAttachment(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteAttachment(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteAttachment(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteAttachment(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteAttachment(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteAttachment(f);
                                }
                            } else {
                                callback.receiveErrordeleteAttachment(f);
                            }
                        } else {
                            callback.receiveErrordeleteAttachment(f);
                        }
                    } else {
                        callback.receiveErrordeleteAttachment(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrordeleteAttachment(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[34].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[34].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#complete
     * @param complete222
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument complete(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteDocument complete222)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[35].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/complete");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    complete222,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "complete")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "complete"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "complete"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "complete"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "complete"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startcomplete
     * @param complete222
     */
    public void startcomplete(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteDocument complete222,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[35].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/complete");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                complete222,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "complete")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "complete"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument.class);
                        callback.receiveResultcomplete((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorcomplete(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "complete"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "complete"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "complete"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorcomplete((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorcomplete((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorcomplete((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorcomplete((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorcomplete(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcomplete(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcomplete(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcomplete(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcomplete(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcomplete(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcomplete(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcomplete(f);
                                }
                            } else {
                                callback.receiveErrorcomplete(f);
                            }
                        } else {
                            callback.receiveErrorcomplete(f);
                        }
                    } else {
                        callback.receiveErrorcomplete(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorcomplete(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[35].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[35].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#instantiateSubtask
     * @param instantiateSubtask224
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument instantiateSubtask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskDocument instantiateSubtask224)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[36].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/instantiateSubtask");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    instantiateSubtask224,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "instantiateSubtask")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "instantiateSubtask"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "instantiateSubtask"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "instantiateSubtask"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "instantiateSubtask"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startinstantiateSubtask
     * @param instantiateSubtask224
     */
    public void startinstantiateSubtask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskDocument instantiateSubtask224,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[36].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/instantiateSubtask");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                instantiateSubtask224,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "instantiateSubtask")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "instantiateSubtask"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument.class);
                        callback.receiveResultinstantiateSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorinstantiateSubtask(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "instantiateSubtask"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "instantiateSubtask"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "instantiateSubtask"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorinstantiateSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorinstantiateSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorinstantiateSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorinstantiateSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorinstantiateSubtask(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorinstantiateSubtask(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorinstantiateSubtask(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorinstantiateSubtask(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorinstantiateSubtask(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorinstantiateSubtask(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorinstantiateSubtask(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorinstantiateSubtask(f);
                                }
                            } else {
                                callback.receiveErrorinstantiateSubtask(f);
                            }
                        } else {
                            callback.receiveErrorinstantiateSubtask(f);
                        }
                    } else {
                        callback.receiveErrorinstantiateSubtask(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorinstantiateSubtask(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[36].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[36].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#release
     * @param release226
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument release(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseDocument release226)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[37].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/release");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    release226,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "release")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "release"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "release"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "release"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "release"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startrelease
     * @param release226
     */
    public void startrelease(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseDocument release226,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[37].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/release");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                release226,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "release")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "release"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument.class);
                        callback.receiveResultrelease((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorrelease(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "release"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "release"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "release"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorrelease((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorrelease((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorrelease((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorrelease((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorrelease(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorrelease(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorrelease(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorrelease(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorrelease(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorrelease(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorrelease(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorrelease(f);
                                }
                            } else {
                                callback.receiveErrorrelease(f);
                            }
                        } else {
                            callback.receiveErrorrelease(f);
                        }
                    } else {
                        callback.receiveErrorrelease(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorrelease(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[37].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[37].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getTaskHistory
     * @param getTaskHistory228
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument getTaskHistory(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryDocument getTaskHistory228)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[38].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskHistory");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getTaskHistory228,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getTaskHistory")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskHistory"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getTaskHistory"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskHistory"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskHistory"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetTaskHistory
     * @param getTaskHistory228
     */
    public void startgetTaskHistory(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryDocument getTaskHistory228,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[38].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskHistory");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getTaskHistory228,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskHistory")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getTaskHistory"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument.class);
                        callback.receiveResultgetTaskHistory((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetTaskHistory(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getTaskHistory"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskHistory"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskHistory"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetTaskHistory((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetTaskHistory((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetTaskHistory((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetTaskHistory(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskHistory(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskHistory(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskHistory(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskHistory(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskHistory(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskHistory(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskHistory(f);
                                }
                            } else {
                                callback.receiveErrorgetTaskHistory(f);
                            }
                        } else {
                            callback.receiveErrorgetTaskHistory(f);
                        }
                    } else {
                        callback.receiveErrorgetTaskHistory(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetTaskHistory(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[38].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[38].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getFault
     * @param getFault230
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument getFault(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultDocument getFault230)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[39].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getFault");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getFault230,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getFault")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getFault"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getFault"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getFault"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getFault"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetFault
     * @param getFault230
     */
    public void startgetFault(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultDocument getFault230,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[39].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getFault");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getFault230,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getFault")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getFault"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument.class);
                        callback.receiveResultgetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetFault(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getFault"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "getFault"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "getFault"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetFault(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetFault(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetFault(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetFault(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetFault(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetFault(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetFault(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetFault(f);
                                }
                            } else {
                                callback.receiveErrorgetFault(f);
                            }
                        } else {
                            callback.receiveErrorgetFault(f);
                        }
                    } else {
                        callback.receiveErrorgetFault(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetFault(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[39].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[39].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setTaskCompletionDurationExpression
     * @param setTaskCompletionDurationExpression232
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument setTaskCompletionDurationExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionDocument setTaskCompletionDurationExpression232)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[40].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskCompletionDurationExpression");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setTaskCompletionDurationExpression232,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setTaskCompletionDurationExpression")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskCompletionDurationExpression"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "setTaskCompletionDurationExpression"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskCompletionDurationExpression"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskCompletionDurationExpression"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetTaskCompletionDurationExpression
     * @param setTaskCompletionDurationExpression232
     */
    public void startsetTaskCompletionDurationExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionDocument setTaskCompletionDurationExpression232,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[40].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskCompletionDurationExpression");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setTaskCompletionDurationExpression232,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskCompletionDurationExpression")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setTaskCompletionDurationExpression"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument.class);
                        callback.receiveResultsetTaskCompletionDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetTaskCompletionDurationExpression(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "setTaskCompletionDurationExpression"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskCompletionDurationExpression"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskCompletionDurationExpression"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetTaskCompletionDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetTaskCompletionDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetTaskCompletionDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetTaskCompletionDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetTaskCompletionDurationExpression(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDurationExpression(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDurationExpression(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDurationExpression(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDurationExpression(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDurationExpression(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDurationExpression(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDurationExpression(f);
                                }
                            } else {
                                callback.receiveErrorsetTaskCompletionDurationExpression(f);
                            }
                        } else {
                            callback.receiveErrorsetTaskCompletionDurationExpression(f);
                        }
                    } else {
                        callback.receiveErrorsetTaskCompletionDurationExpression(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetTaskCompletionDurationExpression(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[40].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[40].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#deleteFault
     * @param deleteFault234
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument deleteFault(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultDocument deleteFault234)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[41].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteFault");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    deleteFault234,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "deleteFault")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteFault"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "deleteFault"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteFault"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "deleteFault"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startdeleteFault
     * @param deleteFault234
     */
    public void startdeleteFault(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultDocument deleteFault234,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[41].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/deleteFault");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                deleteFault234,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "deleteFault")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "deleteFault"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument.class);
                        callback.receiveResultdeleteFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrordeleteFault(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "deleteFault"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteFault"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "deleteFault"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrordeleteFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrordeleteFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrordeleteFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrordeleteFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrordeleteFault(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteFault(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteFault(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteFault(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteFault(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteFault(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteFault(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrordeleteFault(f);
                                }
                            } else {
                                callback.receiveErrordeleteFault(f);
                            }
                        } else {
                            callback.receiveErrordeleteFault(f);
                        }
                    } else {
                        callback.receiveErrordeleteFault(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrordeleteFault(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[41].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[41].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#addAttachment
     * @param addAttachment236
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument addAttachment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentDocument addAttachment236)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[42].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/addAttachment");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    addAttachment236,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "addAttachment")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "addAttachment"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "addAttachment"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "addAttachment"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "addAttachment"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startaddAttachment
     * @param addAttachment236
     */
    public void startaddAttachment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentDocument addAttachment236,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[42].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/addAttachment");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                addAttachment236,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "addAttachment")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "addAttachment"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument.class);
                        callback.receiveResultaddAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErroraddAttachment(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "addAttachment"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "addAttachment"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "addAttachment"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErroraddAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErroraddAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErroraddAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErroraddAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErroraddAttachment(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddAttachment(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddAttachment(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddAttachment(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddAttachment(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddAttachment(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddAttachment(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddAttachment(f);
                                }
                            } else {
                                callback.receiveErroraddAttachment(f);
                            }
                        } else {
                            callback.receiveErroraddAttachment(f);
                        }
                    } else {
                        callback.receiveErroraddAttachment(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErroraddAttachment(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[42].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[42].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getInput
     * @param getInput238
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument getInput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputDocument getInput238)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[43].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getInput");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getInput238,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getInput")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getInput"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getInput"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getInput"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getInput"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetInput
     * @param getInput238
     */
    public void startgetInput(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputDocument getInput238,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[43].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getInput");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getInput238,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getInput")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getInput"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument.class);
                        callback.receiveResultgetInput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetInput(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getInput"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "getInput"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "getInput"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetInput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetInput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetInput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetInput((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetInput(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetInput(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetInput(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetInput(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetInput(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetInput(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetInput(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetInput(f);
                                }
                            } else {
                                callback.receiveErrorgetInput(f);
                            }
                        } else {
                            callback.receiveErrorgetInput(f);
                        }
                    } else {
                        callback.receiveErrorgetInput(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetInput(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[43].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[43].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#loadTask
     * @param loadTask240
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument loadTask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskDocument loadTask240)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[44].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/loadTask");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    loadTask240,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "loadTask")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "loadTask"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "loadTask"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "loadTask"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "loadTask"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startloadTask
     * @param loadTask240
     */
    public void startloadTask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskDocument loadTask240,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[44].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/loadTask");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                loadTask240,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "loadTask")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "loadTask"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument.class);
                        callback.receiveResultloadTask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorloadTask(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "loadTask"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "loadTask"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "loadTask"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorloadTask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorloadTask(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTask(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTask(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTask(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTask(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTask(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTask(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorloadTask(f);
                                }
                            } else {
                                callback.receiveErrorloadTask(f);
                            }
                        } else {
                            callback.receiveErrorloadTask(f);
                        }
                    } else {
                        callback.receiveErrorloadTask(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorloadTask(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[44].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[44].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#suspendUntil
     * @param suspendUntil242
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument suspendUntil(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilDocument suspendUntil242)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[45].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/suspendUntil");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    suspendUntil242,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "suspendUntil")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "suspendUntil"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "suspendUntil"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "suspendUntil"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "suspendUntil"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsuspendUntil
     * @param suspendUntil242
     */
    public void startsuspendUntil(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilDocument suspendUntil242,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[45].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/suspendUntil");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                suspendUntil242,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "suspendUntil")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "suspendUntil"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument.class);
                        callback.receiveResultsuspendUntil((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsuspendUntil(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "suspendUntil"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "suspendUntil"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "suspendUntil"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsuspendUntil((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsuspendUntil((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsuspendUntil((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsuspendUntil((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsuspendUntil(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspendUntil(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspendUntil(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspendUntil(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspendUntil(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspendUntil(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspendUntil(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspendUntil(f);
                                }
                            } else {
                                callback.receiveErrorsuspendUntil(f);
                            }
                        } else {
                            callback.receiveErrorsuspendUntil(f);
                        }
                    } else {
                        callback.receiveErrorsuspendUntil(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsuspendUntil(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[45].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[45].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#hasSubtasks
     * @param hasSubtasks244
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument hasSubtasks(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksDocument hasSubtasks244)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[46].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/hasSubtasks");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    hasSubtasks244,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "hasSubtasks")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "hasSubtasks"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "hasSubtasks"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "hasSubtasks"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "hasSubtasks"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#starthasSubtasks
     * @param hasSubtasks244
     */
    public void starthasSubtasks(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksDocument hasSubtasks244,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[46].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/hasSubtasks");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                hasSubtasks244,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "hasSubtasks")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "hasSubtasks"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument.class);
                        callback.receiveResulthasSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorhasSubtasks(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "hasSubtasks"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "hasSubtasks"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "hasSubtasks"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorhasSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorhasSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorhasSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorhasSubtasks((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorhasSubtasks(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorhasSubtasks(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorhasSubtasks(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorhasSubtasks(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorhasSubtasks(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorhasSubtasks(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorhasSubtasks(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorhasSubtasks(f);
                                }
                            } else {
                                callback.receiveErrorhasSubtasks(f);
                            }
                        } else {
                            callback.receiveErrorhasSubtasks(f);
                        }
                    } else {
                        callback.receiveErrorhasSubtasks(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorhasSubtasks(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[46].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[46].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getMyTaskDetails
     * @param getMyTaskDetails246
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument getMyTaskDetails(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsDocument getMyTaskDetails246)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[47].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getMyTaskDetails");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getMyTaskDetails246,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getMyTaskDetails")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getMyTaskDetails"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getMyTaskDetails"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getMyTaskDetails"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getMyTaskDetails"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetMyTaskDetails
     * @param getMyTaskDetails246
     */
    public void startgetMyTaskDetails(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsDocument getMyTaskDetails246,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[47].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getMyTaskDetails");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getMyTaskDetails246,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getMyTaskDetails")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getMyTaskDetails"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument.class);
                        callback.receiveResultgetMyTaskDetails((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetMyTaskDetails(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getMyTaskDetails"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getMyTaskDetails"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getMyTaskDetails"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetMyTaskDetails((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetMyTaskDetails((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetMyTaskDetails((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetMyTaskDetails(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskDetails(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskDetails(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskDetails(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskDetails(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskDetails(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskDetails(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetMyTaskDetails(f);
                                }
                            } else {
                                callback.receiveErrorgetMyTaskDetails(f);
                            }
                        } else {
                            callback.receiveErrorgetMyTaskDetails(f);
                        }
                    } else {
                        callback.receiveErrorgetMyTaskDetails(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetMyTaskDetails(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[47].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[47].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setFault
     * @param setFault248
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument setFault(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultDocument setFault248)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[48].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setFault");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setFault248,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setFault")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setFault"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "setFault"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setFault"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setFault"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetFault
     * @param setFault248
     */
    public void startsetFault(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultDocument setFault248,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[48].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setFault");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setFault248,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setFault")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setFault"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument.class);
                        callback.receiveResultsetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetFault(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "setFault"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "setFault"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "setFault"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetFault((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetFault(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetFault(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetFault(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetFault(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetFault(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetFault(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetFault(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetFault(f);
                                }
                            } else {
                                callback.receiveErrorsetFault(f);
                            }
                        } else {
                            callback.receiveErrorsetFault(f);
                        }
                    } else {
                        callback.receiveErrorsetFault(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetFault(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[48].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[48].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchForward
     * @param batchForward250
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument batchForward(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardDocument batchForward250)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[49].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchForward");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchForward250,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchForward")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchForward"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchForward"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchForward"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchForward"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchForward
     * @param batchForward250
     */
    public void startbatchForward(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardDocument batchForward250,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[49].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchForward");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchForward250,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchForward")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchForward"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument.class);
                        callback.receiveResultbatchForward((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchForward(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchForward"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchForward"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchForward"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchForward(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchForward(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchForward(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchForward(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchForward(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchForward(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchForward(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchForward(f);
                                }
                            } else {
                                callback.receiveErrorbatchForward(f);
                            }
                        } else {
                            callback.receiveErrorbatchForward(f);
                        }
                    } else {
                        callback.receiveErrorbatchForward(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchForward(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[49].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[49].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setTaskStartDurationExpression
     * @param setTaskStartDurationExpression252
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument setTaskStartDurationExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionDocument setTaskStartDurationExpression252)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[50].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskStartDurationExpression");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setTaskStartDurationExpression252,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setTaskStartDurationExpression")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskStartDurationExpression"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "setTaskStartDurationExpression"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskStartDurationExpression"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskStartDurationExpression"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetTaskStartDurationExpression
     * @param setTaskStartDurationExpression252
     */
    public void startsetTaskStartDurationExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionDocument setTaskStartDurationExpression252,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[50].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskStartDurationExpression");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setTaskStartDurationExpression252,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskStartDurationExpression")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setTaskStartDurationExpression"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument.class);
                        callback.receiveResultsetTaskStartDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetTaskStartDurationExpression(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "setTaskStartDurationExpression"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskStartDurationExpression"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskStartDurationExpression"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetTaskStartDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetTaskStartDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetTaskStartDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetTaskStartDurationExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetTaskStartDurationExpression(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDurationExpression(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDurationExpression(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDurationExpression(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDurationExpression(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDurationExpression(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDurationExpression(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskStartDurationExpression(f);
                                }
                            } else {
                                callback.receiveErrorsetTaskStartDurationExpression(f);
                            }
                        } else {
                            callback.receiveErrorsetTaskStartDurationExpression(f);
                        }
                    } else {
                        callback.receiveErrorsetTaskStartDurationExpression(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetTaskStartDurationExpression(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[50].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[50].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchStart
     * @param batchStart254
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument batchStart(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartDocument batchStart254)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[51].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchStart");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchStart254,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchStart")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchStart"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchStart"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchStart"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchStart"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchStart
     * @param batchStart254
     */
    public void startbatchStart(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartDocument batchStart254,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[51].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchStart");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchStart254,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchStart")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchStart"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument.class);
                        callback.receiveResultbatchStart((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchStart(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchStart"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchStart"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchStart"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchStart(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStart(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStart(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStart(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStart(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStart(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStart(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchStart(f);
                                }
                            } else {
                                callback.receiveErrorbatchStart(f);
                            }
                        } else {
                            callback.receiveErrorbatchStart(f);
                        }
                    } else {
                        callback.receiveErrorbatchStart(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchStart(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[51].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[51].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchSuspend
     * @param batchSuspend256
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument batchSuspend(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendDocument batchSuspend256)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[52].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSuspend");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchSuspend256,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchSuspend")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSuspend"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchSuspend"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSuspend"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchSuspend"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchSuspend
     * @param batchSuspend256
     */
    public void startbatchSuspend(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendDocument batchSuspend256,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[52].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchSuspend");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchSuspend256,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchSuspend")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchSuspend"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument.class);
                        callback.receiveResultbatchSuspend((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchSuspend(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchSuspend"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSuspend"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchSuspend"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchSuspend(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspend(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspend(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspend(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspend(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspend(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspend(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchSuspend(f);
                                }
                            } else {
                                callback.receiveErrorbatchSuspend(f);
                            }
                        } else {
                            callback.receiveErrorbatchSuspend(f);
                        }
                    } else {
                        callback.receiveErrorbatchSuspend(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchSuspend(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[52].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[52].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getTaskDescription
     * @param getTaskDescription258
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument getTaskDescription(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionDocument getTaskDescription258)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[53].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskDescription");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getTaskDescription258,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getTaskDescription")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskDescription"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getTaskDescription"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskDescription"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskDescription"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetTaskDescription
     * @param getTaskDescription258
     */
    public void startgetTaskDescription(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionDocument getTaskDescription258,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[53].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskDescription");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getTaskDescription258,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskDescription")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getTaskDescription"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument.class);
                        callback.receiveResultgetTaskDescription((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetTaskDescription(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getTaskDescription"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskDescription"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskDescription"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetTaskDescription((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetTaskDescription(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDescription(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDescription(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDescription(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDescription(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDescription(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDescription(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskDescription(f);
                                }
                            } else {
                                callback.receiveErrorgetTaskDescription(f);
                            }
                        } else {
                            callback.receiveErrorgetTaskDescription(f);
                        }
                    } else {
                        callback.receiveErrorgetTaskDescription(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetTaskDescription(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[53].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[53].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#nominate
     * @param nominate260
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument nominate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateDocument nominate260)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[54].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/nominate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    nominate260,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "nominate")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "nominate"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "nominate"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "nominate"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "nominate"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startnominate
     * @param nominate260
     */
    public void startnominate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateDocument nominate260,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[54].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/nominate");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                nominate260,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "nominate")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "nominate"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument.class);
                        callback.receiveResultnominate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrornominate(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "nominate"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "nominate"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "nominate"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrornominate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrornominate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrornominate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrornominate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrornominate(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrornominate(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrornominate(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrornominate(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrornominate(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrornominate(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrornominate(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrornominate(f);
                                }
                            } else {
                                callback.receiveErrornominate(f);
                            }
                        } else {
                            callback.receiveErrornominate(f);
                        }
                    } else {
                        callback.receiveErrornominate(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrornominate(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[54].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[54].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#simpleQuery
     * @param simpleQuery262
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument simpleQuery(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryDocument simpleQuery262)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[55].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/simpleQuery");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    simpleQuery262,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "simpleQuery")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "simpleQuery"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "simpleQuery"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "simpleQuery"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "simpleQuery"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsimpleQuery
     * @param simpleQuery262
     */
    public void startsimpleQuery(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryDocument simpleQuery262,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[55].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/simpleQuery");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                simpleQuery262,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "simpleQuery")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "simpleQuery"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument.class);
                        callback.receiveResultsimpleQuery((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsimpleQuery(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "simpleQuery"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "simpleQuery"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "simpleQuery"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsimpleQuery((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsimpleQuery((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsimpleQuery(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsimpleQuery(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsimpleQuery(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsimpleQuery(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsimpleQuery(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsimpleQuery(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsimpleQuery(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsimpleQuery(f);
                                }
                            } else {
                                callback.receiveErrorsimpleQuery(f);
                            }
                        } else {
                            callback.receiveErrorsimpleQuery(f);
                        }
                    } else {
                        callback.receiveErrorsimpleQuery(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsimpleQuery(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[55].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[55].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#addComment
     * @param addComment264
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument addComment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentDocument addComment264)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[56].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/addComment");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    addComment264,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "addComment")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "addComment"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "addComment"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "addComment"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "addComment"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startaddComment
     * @param addComment264
     */
    public void startaddComment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentDocument addComment264,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[56].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/addComment");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                addComment264,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "addComment")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "addComment"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument.class);
                        callback.receiveResultaddComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErroraddComment(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "addComment"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "addComment"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "addComment"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErroraddComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErroraddComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErroraddComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErroraddComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErroraddComment(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddComment(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddComment(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddComment(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddComment(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddComment(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddComment(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroraddComment(f);
                                }
                            } else {
                                callback.receiveErroraddComment(f);
                            }
                        } else {
                            callback.receiveErroraddComment(f);
                        }
                    } else {
                        callback.receiveErroraddComment(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErroraddComment(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[56].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[56].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#isSubtask
     * @param isSubtask266
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument isSubtask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskDocument isSubtask266)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[57].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/isSubtask");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    isSubtask266,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "isSubtask")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "isSubtask"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "isSubtask"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "isSubtask"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "isSubtask"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startisSubtask
     * @param isSubtask266
     */
    public void startisSubtask(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskDocument isSubtask266,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[57].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/isSubtask");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                isSubtask266,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "isSubtask")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "isSubtask"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument.class);
                        callback.receiveResultisSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorisSubtask(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "isSubtask"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "isSubtask"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "isSubtask"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorisSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorisSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorisSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorisSubtask((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorisSubtask(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorisSubtask(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorisSubtask(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorisSubtask(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorisSubtask(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorisSubtask(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorisSubtask(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorisSubtask(f);
                                }
                            } else {
                                callback.receiveErrorisSubtask(f);
                            }
                        } else {
                            callback.receiveErrorisSubtask(f);
                        }
                    } else {
                        callback.receiveErrorisSubtask(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorisSubtask(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[57].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[57].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#claim
     * @param claim268
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument claim(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimDocument claim268)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[58].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/claim");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    claim268,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "claim")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "claim"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "claim"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "claim"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "claim"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startclaim
     * @param claim268
     */
    public void startclaim(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimDocument claim268,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[58].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/claim");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                claim268,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "claim")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "claim"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument.class);
                        callback.receiveResultclaim((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorclaim(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "claim"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "claim"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "claim"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorclaim((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorclaim((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorclaim((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorclaim((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorclaim(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorclaim(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorclaim(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorclaim(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorclaim(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorclaim(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorclaim(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorclaim(f);
                                }
                            } else {
                                callback.receiveErrorclaim(f);
                            }
                        } else {
                            callback.receiveErrorclaim(f);
                        }
                    } else {
                        callback.receiveErrorclaim(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorclaim(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[58].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[58].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getComments
     * @param getComments270
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument getComments(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsDocument getComments270)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[59].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getComments");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getComments270,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getComments")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getComments"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getComments"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getComments"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getComments"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetComments
     * @param getComments270
     */
    public void startgetComments(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsDocument getComments270,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[59].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getComments");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getComments270,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getComments")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getComments"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument.class);
                        callback.receiveResultgetComments((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetComments(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getComments"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getComments"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getComments"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetComments((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetComments((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetComments((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetComments((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetComments(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetComments(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetComments(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetComments(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetComments(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetComments(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetComments(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetComments(f);
                                }
                            } else {
                                callback.receiveErrorgetComments(f);
                            }
                        } else {
                            callback.receiveErrorgetComments(f);
                        }
                    } else {
                        callback.receiveErrorgetComments(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetComments(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[59].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[59].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#query
     * @param query272
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument query(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryDocument query272)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[60].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/query");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    query272,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "query")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "query"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "query"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "query"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "query"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startquery
     * @param query272
     */
    public void startquery(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryDocument query272,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[60].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/query");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                query272,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "query")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "query"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument.class);
                        callback.receiveResultquery((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorquery(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "query"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "query"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "query"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorquery((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorquery((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorquery(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorquery(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorquery(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorquery(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorquery(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorquery(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorquery(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorquery(f);
                                }
                            } else {
                                callback.receiveErrorquery(f);
                            }
                        } else {
                            callback.receiveErrorquery(f);
                        }
                    } else {
                        callback.receiveErrorquery(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorquery(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[60].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[60].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getAssignableUserList
     * @param getAssignableUserList274
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument getAssignableUserList(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListDocument getAssignableUserList274)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[61].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getAssignableUserList");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getAssignableUserList274,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getAssignableUserList")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getAssignableUserList"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getAssignableUserList"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getAssignableUserList"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getAssignableUserList"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetAssignableUserList
     * @param getAssignableUserList274
     */
    public void startgetAssignableUserList(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListDocument getAssignableUserList274,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[61].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getAssignableUserList");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getAssignableUserList274,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getAssignableUserList")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getAssignableUserList"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument.class);
                        callback.receiveResultgetAssignableUserList((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetAssignableUserList(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getAssignableUserList"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getAssignableUserList"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getAssignableUserList"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetAssignableUserList((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetAssignableUserList((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetAssignableUserList(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAssignableUserList(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAssignableUserList(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAssignableUserList(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAssignableUserList(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAssignableUserList(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAssignableUserList(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAssignableUserList(f);
                                }
                            } else {
                                callback.receiveErrorgetAssignableUserList(f);
                            }
                        } else {
                            callback.receiveErrorgetAssignableUserList(f);
                        }
                    } else {
                        callback.receiveErrorgetAssignableUserList(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetAssignableUserList(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[61].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[61].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchDelegate
     * @param batchDelegate276
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument batchDelegate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateDocument batchDelegate276)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[62].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchDelegate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchDelegate276,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchDelegate")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchDelegate"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchDelegate"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchDelegate"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchDelegate"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchDelegate
     * @param batchDelegate276
     */
    public void startbatchDelegate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateDocument batchDelegate276,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[62].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchDelegate");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchDelegate276,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchDelegate")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchDelegate"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument.class);
                        callback.receiveResultbatchDelegate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchDelegate(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchDelegate"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchDelegate"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchDelegate"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchDelegate(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchDelegate(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchDelegate(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchDelegate(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchDelegate(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchDelegate(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchDelegate(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchDelegate(f);
                                }
                            } else {
                                callback.receiveErrorbatchDelegate(f);
                            }
                        } else {
                            callback.receiveErrorbatchDelegate(f);
                        }
                    } else {
                        callback.receiveErrorbatchDelegate(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchDelegate(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[62].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[62].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getAttachment
     * @param getAttachment278
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument getAttachment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentDocument getAttachment278)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[63].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getAttachment");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getAttachment278,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getAttachment")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getAttachment"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getAttachment"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getAttachment"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getAttachment"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetAttachment
     * @param getAttachment278
     */
    public void startgetAttachment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentDocument getAttachment278,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[63].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getAttachment");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getAttachment278,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getAttachment")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getAttachment"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument.class);
                        callback.receiveResultgetAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetAttachment(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "getAttachment"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getAttachment"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getAttachment"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetAttachment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetAttachment(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachment(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachment(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachment(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachment(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachment(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachment(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetAttachment(f);
                                }
                            } else {
                                callback.receiveErrorgetAttachment(f);
                            }
                        } else {
                            callback.receiveErrorgetAttachment(f);
                        }
                    } else {
                        callback.receiveErrorgetAttachment(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetAttachment(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[63].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[63].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#suspend
     * @param suspend280
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument suspend(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendDocument suspend280)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[64].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/suspend");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    suspend280,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "suspend")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "suspend"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "suspend"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "suspend"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "suspend"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsuspend
     * @param suspend280
     */
    public void startsuspend(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendDocument suspend280,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[64].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/suspend");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                suspend280,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "suspend")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "suspend"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument.class);
                        callback.receiveResultsuspend((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsuspend(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "suspend"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "suspend"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "suspend"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsuspend((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsuspend((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsuspend((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsuspend((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsuspend(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspend(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspend(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspend(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspend(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspend(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspend(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsuspend(f);
                                }
                            } else {
                                callback.receiveErrorsuspend(f);
                            }
                        } else {
                            callback.receiveErrorsuspend(f);
                        }
                    } else {
                        callback.receiveErrorsuspend(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsuspend(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[64].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[64].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#updateComment
     * @param updateComment282
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument updateComment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentDocument updateComment282)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[65].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/updateComment");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    updateComment282,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "updateComment")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "updateComment"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "updateComment"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "updateComment"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "updateComment"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startupdateComment
     * @param updateComment282
     */
    public void startupdateComment(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentDocument updateComment282,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[65].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/updateComment");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                updateComment282,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "updateComment")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "updateComment"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument.class);
                        callback.receiveResultupdateComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorupdateComment(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "updateComment"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "updateComment"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "updateComment"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorupdateComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorupdateComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorupdateComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorupdateComment((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorupdateComment(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateComment(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateComment(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateComment(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateComment(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateComment(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateComment(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateComment(f);
                                }
                            } else {
                                callback.receiveErrorupdateComment(f);
                            }
                        } else {
                            callback.receiveErrorupdateComment(f);
                        }
                    } else {
                        callback.receiveErrorupdateComment(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorupdateComment(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[65].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[65].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getParentTaskIdentifier
     * @param getParentTaskIdentifier284
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument getParentTaskIdentifier(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierDocument getParentTaskIdentifier284)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[66].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getParentTaskIdentifier");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getParentTaskIdentifier284,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getParentTaskIdentifier")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getParentTaskIdentifier"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getParentTaskIdentifier"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getParentTaskIdentifier"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getParentTaskIdentifier"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetParentTaskIdentifier
     * @param getParentTaskIdentifier284
     */
    public void startgetParentTaskIdentifier(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierDocument getParentTaskIdentifier284,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[66].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getParentTaskIdentifier");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getParentTaskIdentifier284,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getParentTaskIdentifier")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getParentTaskIdentifier"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument.class);
                        callback.receiveResultgetParentTaskIdentifier((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetParentTaskIdentifier(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getParentTaskIdentifier"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getParentTaskIdentifier"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getParentTaskIdentifier"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetParentTaskIdentifier((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetParentTaskIdentifier((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetParentTaskIdentifier((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetParentTaskIdentifier((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetParentTaskIdentifier(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTaskIdentifier(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTaskIdentifier(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTaskIdentifier(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTaskIdentifier(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTaskIdentifier(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTaskIdentifier(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetParentTaskIdentifier(f);
                                }
                            } else {
                                callback.receiveErrorgetParentTaskIdentifier(f);
                            }
                        } else {
                            callback.receiveErrorgetParentTaskIdentifier(f);
                        }
                    } else {
                        callback.receiveErrorgetParentTaskIdentifier(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetParentTaskIdentifier(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[66].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[66].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchResume
     * @param batchResume286
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument batchResume(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeDocument batchResume286)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[67].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchResume");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchResume286,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchResume")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchResume"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchResume"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchResume"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchResume"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchResume
     * @param batchResume286
     */
    public void startbatchResume(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeDocument batchResume286,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[67].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchResume");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchResume286,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchResume")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchResume"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument.class);
                        callback.receiveResultbatchResume((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchResume(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchResume"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchResume"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchResume"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchResume(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchResume(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchResume(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchResume(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchResume(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchResume(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchResume(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchResume(f);
                                }
                            } else {
                                callback.receiveErrorbatchResume(f);
                            }
                        } else {
                            callback.receiveErrorbatchResume(f);
                        }
                    } else {
                        callback.receiveErrorbatchResume(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchResume(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[67].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[67].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#stop
     * @param stop288
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument stop(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopDocument stop288)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[68].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/stop");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    stop288,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "stop")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "stop"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "stop"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "stop"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "stop"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startstop
     * @param stop288
     */
    public void startstop(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopDocument stop288,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[68].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/stop");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                stop288,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "stop")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "stop"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument.class);
                        callback.receiveResultstop((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorstop(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "stop"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "stop"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "stop"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorstop((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorstop((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorstop((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorstop((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorstop(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstop(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstop(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstop(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstop(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstop(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstop(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorstop(f);
                                }
                            } else {
                                callback.receiveErrorstop(f);
                            }
                        } else {
                            callback.receiveErrorstop(f);
                        }
                    } else {
                        callback.receiveErrorstop(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorstop(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[68].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[68].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setTaskCompletionDeadlineExpression
     * @param setTaskCompletionDeadlineExpression290
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument setTaskCompletionDeadlineExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionDocument setTaskCompletionDeadlineExpression290)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[69].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskCompletionDeadlineExpression");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setTaskCompletionDeadlineExpression290,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setTaskCompletionDeadlineExpression")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskCompletionDeadlineExpression"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "setTaskCompletionDeadlineExpression"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskCompletionDeadlineExpression"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "setTaskCompletionDeadlineExpression"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetTaskCompletionDeadlineExpression
     * @param setTaskCompletionDeadlineExpression290
     */
    public void startsetTaskCompletionDeadlineExpression(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionDocument setTaskCompletionDeadlineExpression290,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[69].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setTaskCompletionDeadlineExpression");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setTaskCompletionDeadlineExpression290,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setTaskCompletionDeadlineExpression")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setTaskCompletionDeadlineExpression"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument.class);
                        callback.receiveResultsetTaskCompletionDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetTaskCompletionDeadlineExpression(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "setTaskCompletionDeadlineExpression"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskCompletionDeadlineExpression"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setTaskCompletionDeadlineExpression"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetTaskCompletionDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetTaskCompletionDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetTaskCompletionDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetTaskCompletionDeadlineExpression((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                                }
                            } else {
                                callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                            }
                        } else {
                            callback.receiveErrorsetTaskCompletionDeadlineExpression(f);
                        }
                    } else {
                        callback.receiveErrorsetTaskCompletionDeadlineExpression(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetTaskCompletionDeadlineExpression(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[69].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[69].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#fail
     * @param fail292
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument fail(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailDocument fail292)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[70].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/fail");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    fail292,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "fail")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "fail"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "fail"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "fail"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "fail"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startfail
     * @param fail292
     */
    public void startfail(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailDocument fail292,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[70].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/fail");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                fail292,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "fail")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "fail"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument.class);
                        callback.receiveResultfail((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorfail(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "fail"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "fail"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "fail"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorfail((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorfail((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorfail((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorfail((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorfail(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorfail(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorfail(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorfail(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorfail(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorfail(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorfail(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorfail(f);
                                }
                            } else {
                                callback.receiveErrorfail(f);
                            }
                        } else {
                            callback.receiveErrorfail(f);
                        }
                    } else {
                        callback.receiveErrorfail(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorfail(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[70].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[70].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getTaskInstanceData
     * @param getTaskInstanceData294
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument getTaskInstanceData(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataDocument getTaskInstanceData294)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[71].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskInstanceData");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getTaskInstanceData294,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getTaskInstanceData")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskInstanceData"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getTaskInstanceData"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskInstanceData"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getTaskInstanceData"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetTaskInstanceData
     * @param getTaskInstanceData294
     */
    public void startgetTaskInstanceData(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataDocument getTaskInstanceData294,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[71].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getTaskInstanceData");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getTaskInstanceData294,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getTaskInstanceData")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getTaskInstanceData"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument.class);
                        callback.receiveResultgetTaskInstanceData((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetTaskInstanceData(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getTaskInstanceData"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskInstanceData"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getTaskInstanceData"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetTaskInstanceData((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetTaskInstanceData((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetTaskInstanceData((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetTaskInstanceData(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskInstanceData(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskInstanceData(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskInstanceData(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskInstanceData(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskInstanceData(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskInstanceData(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetTaskInstanceData(f);
                                }
                            } else {
                                callback.receiveErrorgetTaskInstanceData(f);
                            }
                        } else {
                            callback.receiveErrorgetTaskInstanceData(f);
                        }
                    } else {
                        callback.receiveErrorgetTaskInstanceData(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetTaskInstanceData(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[71].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[71].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#batchActivate
     * @param batchActivate296
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument batchActivate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateDocument batchActivate296)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[72].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchActivate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    batchActivate296,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "batchActivate")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchActivate"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "batchActivate"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchActivate"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "batchActivate"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startbatchActivate
     * @param batchActivate296
     */
    public void startbatchActivate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateDocument batchActivate296,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[72].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/batchActivate");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                batchActivate296,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "batchActivate")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "batchActivate"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument.class);
                        callback.receiveResultbatchActivate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorbatchActivate(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "batchActivate"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchActivate"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "batchActivate"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorbatchActivate(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchActivate(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchActivate(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchActivate(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchActivate(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchActivate(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchActivate(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorbatchActivate(f);
                                }
                            } else {
                                callback.receiveErrorbatchActivate(f);
                            }
                        } else {
                            callback.receiveErrorbatchActivate(f);
                        }
                    } else {
                        callback.receiveErrorbatchActivate(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorbatchActivate(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[72].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[72].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#setPriority
     * @param setPriority298
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument setPriority(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityDocument setPriority298)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[73].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setPriority");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    setPriority298,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "setPriority")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setPriority"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "setPriority"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setPriority"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "setPriority"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startsetPriority
     * @param setPriority298
     */
    public void startsetPriority(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityDocument setPriority298,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[73].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/setPriority");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                setPriority298,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "setPriority")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "setPriority"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument.class);
                        callback.receiveResultsetPriority((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorsetPriority(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "setPriority"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setPriority"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "setPriority"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorsetPriority((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorsetPriority((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorsetPriority((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorsetPriority((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorsetPriority(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetPriority(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetPriority(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetPriority(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetPriority(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetPriority(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetPriority(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorsetPriority(f);
                                }
                            } else {
                                callback.receiveErrorsetPriority(f);
                            }
                        } else {
                            callback.receiveErrorsetPriority(f);
                        }
                    } else {
                        callback.receiveErrorsetPriority(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorsetPriority(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[73].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[73].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#getSubtaskIdentifiers
     * @param getSubtaskIdentifiers300
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument getSubtaskIdentifiers(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersDocument getSubtaskIdentifiers300)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[74].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getSubtaskIdentifiers");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getSubtaskIdentifiers300,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "getSubtaskIdentifiers")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getSubtaskIdentifiers"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getSubtaskIdentifiers"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getSubtaskIdentifiers"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getSubtaskIdentifiers"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startgetSubtaskIdentifiers
     * @param getSubtaskIdentifiers300
     */
    public void startgetSubtaskIdentifiers(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersDocument getSubtaskIdentifiers300,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[74].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/getSubtaskIdentifiers");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getSubtaskIdentifiers300,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "getSubtaskIdentifiers")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "getSubtaskIdentifiers"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument.class);
                        callback.receiveResultgetSubtaskIdentifiers((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetSubtaskIdentifiers(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getSubtaskIdentifiers"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getSubtaskIdentifiers"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getSubtaskIdentifiers"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErrorgetSubtaskIdentifiers((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErrorgetSubtaskIdentifiers((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErrorgetSubtaskIdentifiers((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErrorgetSubtaskIdentifiers((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetSubtaskIdentifiers(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtaskIdentifiers(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtaskIdentifiers(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtaskIdentifiers(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtaskIdentifiers(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtaskIdentifiers(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtaskIdentifiers(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetSubtaskIdentifiers(f);
                                }
                            } else {
                                callback.receiveErrorgetSubtaskIdentifiers(f);
                            }
                        } else {
                            callback.receiveErrorgetSubtaskIdentifiers(f);
                        }
                    } else {
                        callback.receiveErrorgetSubtaskIdentifiers(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetSubtaskIdentifiers(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[74].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[74].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#activate
     * @param activate302
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault :
     * @throws org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault :
     */
    public org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument activate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateDocument activate302)
        throws java.rmi.RemoteException,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault,
            org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[75].getName());
            _operationClient.getOptions()
                            .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/activate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    activate302,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                            "activate")),
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "activate"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument.class);

            return (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "activate"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "activate"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "activate"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex;
                        }

                        if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                            throw (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdmin#startactivate
     * @param activate302
     */
    public void startactivate(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateDocument activate302,
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HumanTaskClientAPIAdminCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[75].getName());
        _operationClient.getOptions()
                        .setAction("http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803/activate");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                activate302,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                        "activate")),
                new javax.xml.namespace.QName(
                    "http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803",
                    "activate"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument.class);
                        callback.receiveResultactivate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErroractivate(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(), "activate"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "activate"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(), "activate"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) {
                                        callback.receiveErroractivate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) {
                                        callback.receiveErroractivate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) {
                                        callback.receiveErroractivate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateFault) ex);

                                        return;
                                    }

                                    if (ex instanceof org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) {
                                        callback.receiveErroractivate((org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessFault) ex);

                                        return;
                                    }

                                    callback.receiveErroractivate(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroractivate(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroractivate(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroractivate(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroractivate(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroractivate(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroractivate(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErroractivate(f);
                                }
                            } else {
                                callback.receiveErroractivate(f);
                            }
                        } else {
                            callback.receiveErroractivate(f);
                        }
                    } else {
                        callback.receiveErroractivate(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErroractivate(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[75].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[75].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    /**
     * Get the {@link org.apache.xmlbeans.XmlOptions} object that the stub uses when
     * serializing objects to XML.
     *
     * @return the options used for serialization
     */
    public org.apache.xmlbeans.XmlOptions _getXmlOptions() {
        return _xmlOptions;
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        return toOM(param);
    }

    private org.apache.axiom.om.OMElement toOM(
        final org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument param)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.om.OMXMLParserWrapper builder = org.apache.axiom.om.OMXMLBuilderFactory.createOMBuilder(new javax.xml.transform.sax.SAXSource(
                    new org.apache.axis2.xmlbeans.XmlBeansXMLReader(param,
                        _xmlOptions), new org.xml.sax.InputSource()));

        try {
            return builder.getDocumentElement(true);
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateDocument param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        org.apache.axiom.soap.SOAPEnvelope envelope = factory.getDefaultEnvelope();

        if (param != null) {
            envelope.getBody().addChild(toOM(param, optimizeContent));
        }

        return envelope;
    }

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    public org.apache.xmlbeans.XmlObject fromOM(
        org.apache.axiom.om.OMElement param, java.lang.Class type)
        throws org.apache.axis2.AxisFault {
        try {
            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteCommentResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutcomeResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtasksResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RemoveResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskAbstractsResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetRenderingTypesResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SkipResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchClaimResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendUntilResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadAuthorisationParamsResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DelegateResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.RecipientNotAllowedDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetOutputResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetOutputResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchFailResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetPriorityResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskEventsResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentInfosResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ForwardResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteOutputResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetGenericHumanRoleResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ResumeResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDeadlineExpressionResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchNominateResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StartResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchReleaseResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskOperationsResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStopResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSkipResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSetGenericHumanRoleResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchRemoveResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDetailsResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchCompleteResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteAttachmentResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.CompleteResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.InstantiateSubtaskResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ReleaseResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskHistoryResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetFaultResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDurationExpressionResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.DeleteFaultResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddAttachmentResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetInputResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.LoadTaskResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendUntilResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.HasSubtasksResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetMyTaskDetailsResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetFaultResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchForwardResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskStartDurationExpressionResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchStartResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchSuspendResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskDescriptionResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.NominateResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SimpleQueryResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.AddCommentResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IsSubtaskResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ClaimResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetCommentsResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.QueryResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAssignableUserListResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchDelegateResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetAttachmentResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SuspendResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.UpdateCommentResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetParentTaskIdentifierResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchResumeResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.StopResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetTaskCompletionDeadlineExpressionResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.FailResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetTaskInstanceDataResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.BatchActivateResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.SetPriorityResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.GetSubtaskIdentifiersResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.ActivateResponseDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalArgumentDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalOperationDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalStateDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }

            if (org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.class.equals(
                        type)) {
                org.apache.axiom.om.OMXMLStreamReaderConfiguration configuration =
                    new org.apache.axiom.om.OMXMLStreamReaderConfiguration();
                configuration.setPreserveNamespaceContext(true);

                return org.oasis_open.docs.ns.bpel4people.ws_humantask.api._200803.IllegalAccessDocument.Factory.parse(param.getXMLStreamReader(
                        false, configuration));
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }
}
